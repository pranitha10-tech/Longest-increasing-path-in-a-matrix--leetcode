class Solution {
    public int longestIncreasingPath(int[][] a) {
        int max=-1;
        HashMap<String,Integer> hm=new HashMap<>();
        for(int i=0;i<a.length;i++){
            for(int j=0;j<a[0].length;j++){ 
                int ans = f(a,i,j,-1,hm);
                max=Math.max(max,ans);
            }
        }
        return max;
    }
    int f(int a[][],int i,int j,int k,HashMap<String,Integer> hm){
        if(i>=a.length || i<0 || j>=a[0].length || j<0){
            return 0;
        }
        String s=i+"$"+j+"$"+k;
        if(hm.containsKey(s)){
            return hm.get(s);
        }
        else{
            int b=0,d=0,e=0,f=0;
            if(a[i][j]>k){
                 b=f(a,i,j+1,a[i][j],hm)+1;
                 d= f(a,i+1,j,a[i][j],hm)+1;
                 e=f(a,i,j-1,a[i][j],hm)+1;
                 f=f(a,i-1,j,a[i][j],hm)+1;
            }
           int ans= Math.max(Math.max(Math.max(b,d),e),f);
            hm.put(s,ans);
            return ans;
        }
    }
}